#include "console.oat"`

class Piece <: Object{
	int team;
        int row;
        int col;

	new (int team)()
	{
		this.team = team;

	}
	
	unit init(int r, int c, int team){
          this.row = r;
          this.col = c;
          this.team = team;
          return;
	}
	
	unit draw(){
          int x = 1+this.col*11;
          int y = this.row*6;
          if(this.team==0){
            for(int i = 0; i<5; i=i+1;){
              con_move(x,y);
              con_print("          ");
              y=y+1;
            } 
          }
          if(this.team==1){
            for(int i = 0; i<5; i=i+1;){
              con_move(x,y);
              con_print("XXXXXXXXXX");
              y=y+1;
            }
          }
          if(this.team==2){
            for(int i = 0; i<5; i=i+1;){
              con_move(x,y);
              con_print("OOOOOOOOOO");
              y=y+1;
            }
          }
          return;
	}
	
};

class Board <: Object {
  Piece[][] pieces;
  
  new ()()
    this.pieces = new [6](fun i -> new [7](fun i -> new Piece(0)));
  {
    this.init();
  }
    

  unit init(){
    for (int r = 0; r<6; r=r+1;){
      for (int c = 0; c<7; c=c+1;){
        this.pieces[r][c].init(r,c,0);
      }
    }
    return;
  }
  unit draw(){
    int x = 0;
    int y = 0;
    con_move(x,y);
    /*Print | */
    for (int i = 0; i<8; i=i+1;){
      for(int j = 0; j<36; j=j+1;){
        con_move(i*11,j);
        con_print("|");
      }
    }
    /*Print - */
    for(int i = 0; i<6; i=i+1;){
      con_move(0,5+i*6);
      con_print("|----------|----------|----------|----------|----------|----------|----------|");
    }
    /*Print pieces*/
    for (int r = 0; r<6; r=r+1;){
      for(int c = 0; c<7; c=c+1;){
      	con_attrset(con_color(this.pieces[r][c].team));
        this.pieces[r][c].draw();
        con_attrset(con_color(0));
      }
    }
    return;
  }

  bool checkPiece(int r, int c, int p){
    bool found = false;
    if(r<3){
      if(this.pieces[r+1][c].team == p & this.pieces[r+2][c].team ==p & this.pieces[r+3][c].team ==p)
        found = true;
    }
    if(c<4){
      if(this.pieces[r][c+1].team == p & this.pieces[r][c+2].team ==p & this.pieces[r][c+3].team ==p)
        found = true;
    }
    if(c<4 & r<3){
      if(this.pieces[r+1][c+1].team == p & this.pieces[r+2][c+2].team ==p & this.pieces[r+3][c+3].team == p)
        found = true;
    }
    if(c>2 & r<3){
      if(this.pieces[r+1][c-1].team == p & this.pieces[r+2][c-2].team ==p & this.pieces[r+3][c-3].team == p)
        found = true;
    }
    return found; 
  }
	unit clear(){return;}
};

class Player <: Object{
  string name;
  int num;
  new (string name, int num)()
    this.name = name;
  {
    this.num = num;
  }
  
};

class AI <: Object{
	bool enabled;
	new(int num, bool enabled)(){
		this.enabled = enabled;
	}
	
  
	int findmove(State s,int r, int c){
		int move = -1; 
		if(r<3){
	      if(s.board.pieces[r+1][c].team == 2
	      	& s.board.pieces[r+2][c].team == 2
	      		& s.board.pieces[r+3][c].team ==0)
	        move = c;
	    }
	    if(c<4){
	      if(s.board.pieces[r][c+1].team == 2
	      	& s.board.pieces[r][c+2].team == 2
	      		& s.board.pieces[r][c+3].team ==0)
	        move = c+3;
	    }
	    if(c<4 & r<3){
	      if(s.board.pieces[r+1][c+1].team == 2
	      	& s.board.pieces[r+2][c+2].team ==2
	      		& s.board.pieces[r+3][c+3].team == 0)
	        move = c+3;
	    }
	    if(c>2 & r<3){
	      if(s.board.pieces[r+1][c-1].team == 2
	      	& s.board.pieces[r+2][c-2].team == 2
	      		& s.board.pieces[r+3][c-3].team == 0)
	        move = c-3;
	    }
	    		if(r<3){
	      if(s.board.pieces[r+1][c].team == 1
	      	& s.board.pieces[r+2][c].team == 1
	      		& s.board.pieces[r+3][c].team ==0)
	        move = c;
	    }
	    if(c<4){
	      if(s.board.pieces[r][c+1].team == 1
	      	& s.board.pieces[r][c+2].team == 1
	      		& s.board.pieces[r][c+3].team ==0)
	        move = c+3;
	    }
	    if(c<4 & r<3){
	      if(s.board.pieces[r+1][c+1].team == 1
	      	& s.board.pieces[r+2][c+2].team ==1
	      		& s.board.pieces[r+3][c+3].team == 0)
	        move = c+3;
	    }
	    if(c>2 & r<3){
	      if(s.board.pieces[r+1][c-1].team == 1
	      	& s.board.pieces[r+2][c-2].team == 1
	      		& s.board.pieces[r+3][c-3].team == 0)
	        move = c-3;
	    } 
		return move+49;
	}


	int move(State s){
		int i = 48;
		for(int r = 0; r<6; r=r+1;){
      for(int c = 0; c<7; c=c+1;){
      	if (i==48) {
      		i = this.findmove(s,r,c);
      	}
      }
    }
    if (i==48) {
	    	for (int k=0; k<7; k=k+1;) {
	    		if (s.board.pieces[0][k].team==0){
	    			i=k+49;
	    		}
	    	}
	    }
    return i;
  }
  
};

class State <: Object {
  Board board;
  Player player1;
  Player player2;
  AI ai;
  int turn;
  bool move;
  string msg;
	int gameOver;
	
  new ()() 
  	this.msg = "";
  	this.player1 = new Player("player1", 1);
    this.player2 = new Player("player2", 2);
    this.ai = new AI(2,false);
    this.board = new Board();
  {
    this.turn = 1;
    this.move = false;
    this.gameOver = 0;
   }

  int update (int col) {
    int move = 0;
    bool flag = true;
    int i = 0;
    
    if 			(col == 49){move = 0;}
    else if (col == 50){move = 1;}
    else if (col == 51){move = 2;}
    else if (col == 52){move = 3;}
    else if (col == 53){move = 4;}
    else if (col == 54){move = 5;}
    else if (col == 55){move = 6;}
    else if (col == 27){flag = false; this.move = true; this.gameOver = 4;}
    else 							 {move = 0;}
    
    i=5;
    
    while (flag) {
      if(this.board.pieces[i][move].team == 0) {
      	this.board.pieces[i][move].team = this.turn;
        this.board.draw();
        if(this.checkWinner()){
          this.gameOver = this.turn;
    		}
    		if(this.checkDraw()){
    			this.gameOver = 3;
    		}
      	flag = false;
      	this.move = true;
        if (this.turn == 1) {
          this.turn = this.turn + 1;
          this.msg = "Player 2's turn!";
        }
        else {
          this.turn = 1;
          this.msg = "Player 1's turn!";
        }
      }
      i=i-1;
      if (i<0){
      	this.msg = "Can't move there!\n";
      	flag = false;
      	this.move = false;
      }
    }
    return this.gameOver;
  }
  
  bool checkDraw(){
  	bool draw = true;
  	for(int r = 0; r<6; r=r+1;){
      for(int c = 0; c<7; c=c+1;){
      	if((this.board.pieces[r][c].team==0) & (draw == true)){
      		draw = false;
      		}
      	}
      }
  	return draw;
  }
  
  bool checkWinner() {
    bool won = false;
    for(int r = 0; r<6; r=r+1;){
      for(int c = 0; c<7; c=c+1;){
        if((this.board.pieces[r][c].team==this.turn) & (won == false)){
          won= this.board.checkPiece(r,c,this.turn);
        }
      }
    }
    return won;
  }
    
    
  unit print_msg() {
  con_move(0,37);
    con_print(this.msg);
    con_refresh();
    this.msg = "";
    return;
  }
  unit display() {
    con_clear();
    this.board.draw();
    this.print_msg();
    return;
  }
};

unit instructions() {
  con_move(0,0);
  con_attrset(con_color(5));
  con_print("\n
		 .o88b.  .d88b.  d8b   db d8b   db d88888b  .o88b. d888888b        j88D  
		d8P  Y8 .8P  Y8. 888o  88 888o  88 88'     d8P  Y8 `~~88~~'       j8 88  
		8P      88    88 88V8o 88 88V8o 88 88ooooo 8P         88         j8' 88  
		8b      88    88 88 V8o88 88 V8o88 88~~~~~ 8b         88         V88888D 
		Y8b  d8 `8b  d8' 88  V888 88  V888 88.     Y8b  d8    88             88  
		 `Y88P'  `Y88P'  VP   V8P VP   V8P Y88888P  `Y88P'    YP             VP  \n
    ");
    con_attrset(con_color(0));
    con_print("
    Connect4! \n
      Press the number (1-7) over the column where you want to place your piece. \n
      Number keys - Place piece \n
      First to get 4 pieces in a row/column/diagonal wins! \n
      Press Esc to end game \n\n
      [Press [Enter] to play!]\n");
  return;
}

unit intro() {
	int i = 0;
	con_init();
  con_move(0,0);
  instructions();
  i = con_getch();
  return;
}

unit gametype(){
	con_clear();
	con_move(0,0);
	con_attrset(con_color(5));
  con_print("\n
		 .o88b.  .d88b.  d8b   db d8b   db d88888b  .o88b. d888888b        j88D  
		d8P  Y8 .8P  Y8. 888o  88 888o  88 88'     d8P  Y8 `~~88~~'       j8 88  
		8P      88    88 88V8o 88 88V8o 88 88ooooo 8P         88         j8' 88  
		8b      88    88 88 V8o88 88 V8o88 88~~~~~ 8b         88         V88888D 
		Y8b  d8 `8b  d8' 88  V888 88  V888 88.     Y8b  d8    88             88  
		 `Y88P'  `Y88P'  VP   V8P VP   V8P Y88888P  `Y88P'    YP             VP  \n
    ");
    con_attrset(con_color(0));
    con_print("
    Connect4! \n
      Press 1 for Player vs Player. \n
      Press 2 for Player vs AI. \n");
	return;
}

int newgame(State s){
	int input = 0;
  s.display();
  input = con_getch();
  gametype();
  return 0;
}

int program(int argc, string[] argv) {
  int input = 0;
  State s = new State();
  int gameStat = 0;
  intro();
  while (input != 49 & input != 50){
  	gametype();
  	input = con_getch();
  }
  s.board.init();
  con_clear();
  while ((s.move != true & gameStat==0 & (input==49 | input == 50))) {
  if (input == 50){
  	s.ai.enabled = true;
  }
    s.display();
    if (s.ai.enabled & s.turn == 2) {
    	input = s.ai.move(s);
    }
    else {
        	input = con_getch();
    
    while( (input != 27) & (input<49 | input>55)){
    	s.msg = "Make a valid move.\n";
    	s.display();
    	input = con_getch();
    	}
    }
    gameStat = s.update(input);
    s.move = false;
    input = 49;
    if(gameStat == 1){
    	s.msg = "Player 1 wins!! Press 1 for a new game";
      gameStat = newgame(s);
      s = new State();
      s.board.init();
      input = con_getch();
    }
    if(gameStat == 2){
      s.msg = "Player 2 wins!! Press 1 for a new game";
      gameStat = newgame(s);
      s = new State();
      s.board.init();
      input = con_getch();
    }
    if(gameStat == 3) {
    	s.msg = "Draw! No more moves! Press 1 for a new game";
    	gameStat = newgame(s);
    	s = new State();
      s.board.init();
    	input = con_getch();
    }
    if(gameStat == 4) {
			s.msg = "\n\n\n\n    Thanks for playing!    Goodbye!\n
			       Press any key to quit.";
  		s.display();
  		s = new State();
      s.board.init();
  		input = con_getch();
  		s.move = true;
  	}
  	con_clear();
  }
  con_cleanup();
  return 0;
}
