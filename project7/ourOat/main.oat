#include "console.oat"`

class Piece <: Object{
	int team;
	string pic0;
	string pic1;
	string pic2;
	new (int team)()
			this.pic0 = "     \n     \n     \n     \n     \n";
		this.pic1 = "XXXXX\nXXXXX\nXXXXX\nXXXXX\nXXXXX\n";
		this.pic2 = "OOOOO\nOOOOO\nOOOOO\nOOOOO\nOOOOO\n";
	{
		this.team = 0;
	}
	
	unit init(){
		return;
	}
	
	unit draw(){
		if(this.team==0){
			con_print(this.pic0);
		}
		if(this.team==1){
			con_print(this.pic1);
		}
		if(this.team==2){
			con_print(this.pic2);
		}
                return;
	}
	
};

class Board <: Object {
  Piece[][] pieces;
  
  new ()()
    this.pieces = new [7](fun i -> new [6](fun i -> new Piece(0)));
  {
  }
  
  /*int update()() {return;}*/
  
  unit draw(){
    int x = 0;
    int y = 0;
    con_move(x,y);
    for (int r = 0; r<6; r=r+1;){
      x=0;
      con_move(x,y);
      con_print("|\n|\n|\n|\n|");
      x=1;
      for(int c = 0; c<7; c=c+1;){
        con_move(x,y);
        this.pieces[r][c].draw();
        x=x+5;
        con_move(x,y);
        con_print("|\n|\n|\n|\n|");
        x=x+1;
      }
      x=0;
      y=y+6;
      con_move(x,y);
      con_print("___________________________________________");
    }
    return;
  }	
          
	
};

class Player <: Object{
	string name;
	int num;
	bool turn;
	bool winner;
	new (string name, bool turn, bool winner, int num)(){
		this.name = name;
		this.turn = false;
		this.winner = false;
		this.num = num;
		}
	bool checkWinner() {return this.winner;}

};
	
class State <: Object {
  Board board;
  Player player1;
  Player player2;

  new ()() 
    this.player1 = new Player("player1", true, false, 1);
    this.player2 = new Player("player2", false, false, 2);
    this.board = new Board();
  {  }

  unit init() {
    return;
  }
  
  unit update (Player player, int move) {
  	int move2=0;
  	for (int i = 0; i < 6; i=i+1;) {
          if(this.board.pieces[move][i].team == 0) {
            move2 = this.board.pieces[move][i+1].team;
          }
        }
        this.board.pieces[move][move2].team = player.num;
        if (this.player1.turn) {
          this.player1.turn = false;
          this.player2.turn = true;
        }
        if (this.player2.turn) {
          this.player2.turn = false;
          this.player1.turn = true;
        }
        return;
  }
  
  unit display() {
    con_clear();
    con_print("Updating display!\n");
    con_refresh();
    return;
  }
};

unit instructions() {
  int k = 0;
  con_move(0,0);
  con_print("
    Connect4! \n
      Press the number over the column where you want to place your piece. \n
      Number keys - Place piece \n
      First to get 4 pieces in a row wins! \n
      Esc - quit \n\n
      [Press any key to play!]\n");
    k = con_getch();
  return;
}

unit lose() {
  return;
}

int program(int argc, string[] argv) {
  int minx = 80;
  int miny = 80;
  int input = 0;
  Board b = new Board();
  con_init();
  con_move(0,0);
  instructions();
  while ((input != 27)) {
  	b.draw();
  	input = con_getch();
  }
  con_cleanup();
  return 1;
}
